git add .  添加文件下所有更改的文件
git commit -m "test" 将文件添加到暂存区，-m后的参数必须添加
git config --global color.ui true  设置Git面板颜色
git config --global user.name "youname" 配置全局的用户名
git config --global user.email "youeamil@email.com" 配置全局的邮箱
git config -l  查看当前Git的配置信息
git stash 储存当前分支的更改
git stash pop 释放上一次的储存
git stash list  显示存储栈
git stash apply stash@{1}  将你指定版本号为stash@{1}的工作取出来
git pull origin master 拉去最新的代码
git push origin master 推送代码到远程
git checkout -b dev  创建并切换分支
git branch   查看分支
git branch -d dev   删除分支
git branch -D dev   强制删除分支
git push origin --delete dev 删除远程分支
git merge dev  合并分支
git checkout .  舍弃当前所有的更改
git status  查看当前仓库的状态
git diff test.txt 查看当前文件修改的内容
git log 查看提交记录
git reset --hard HEAD^ 版本回退 ，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
git reset --hard f4545dfs 回退到指定版本
git reflog 查看命令历史记录，确定要回退的版本
git diff HEAD -- readme.txt  查看工作区和版本库里面最新版本的区别
git reset HEAD file   把暂存区的修改撤销掉
git rm test.txt  git commit -m "remove test.txt" 从版本库删除文件
git rm -r --cached "CAM.iml"  git commit  git push  从远程库中删除文件 
ssh-keygen -t rsa -C "youremail@example.com"  生成SSH key
git push -u origin master 第一次推送master分支的所有内容
git diff HEAD -- file 查看工作区和版本库里面最新版本的区别
git log -p filename 查看某个文件的提交记录
git log --graph --pretty=oneline --abbrev-commit 查看分支合并情况
git remote -v 查看远程库信息
git commit --amend 修改错误的注释 按字母c进去编辑状态  按ESC退出编辑状态，接着连按字母ZZ保存退出 如果push之后更改，需要重新push
git log --author="username" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc }' -  统计提交的代码量

.gitignore配置
	*.css 忽略以css结尾的文件
	dist/ 忽略dist目录下的文件
	/dist/ 不提交dist文件夹
	!*.txt 不忽略文件	
	
解决冲突：
首先从主分支上拉取代码，查看冲突文件和冲突的部分，解决冲突，重新提交即可
Updated upstream 和=====之间的内容就是pull下来的内容，====和stashed changes之间的内容就是本地修改的内容